{"version":3,"file":"monei.module.js","sources":["../src/base.ts","../src/api.ts","../src/configuration.ts","../monei.ts"],"sourcesContent":["// tslint:disable\n/**\n * MONEI API v1\n * <p>The MONEI API is organized around <a href=\\\"https://en.wikipedia.org/wiki/Representational_State_Transfer\\\">REST</a>. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <h4 id=\\\"base-url\\\">Base URL:</h4> <p><a href=\\\"https://api.monei.com/v1\\\">https://api.monei.com/v1</a></p> <h4 id=\\\"client-libraries\\\">Client libraries:</h4> <ul> <li><a href=\\\"https://github.com/MONEI/monei-php-sdk\\\">PHP SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-python-sdk\\\">Python SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-node-sdk\\\">Node.js SDK</a></li> <li><a href=\\\"https://postman.monei.com/\\\">Postman</a></li> </ul> <h4 id=\\\"important\\\">Important:</h4> <p><strong>If you are not using our official SDKs, you need to provide a valid <code>User-Agent</code> header in each request, otherwise your requests will be rejected.</strong></p> \n *\n * The version of the OpenAPI document: 1.4.4\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from '../axios';\n\nexport const BASE_PATH = \"https://api.monei.com/v1\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * MONEI API v1\n * <p>The MONEI API is organized around <a href=\\\"https://en.wikipedia.org/wiki/Representational_State_Transfer\\\">REST</a>. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <h4 id=\\\"base-url\\\">Base URL:</h4> <p><a href=\\\"https://api.monei.com/v1\\\">https://api.monei.com/v1</a></p> <h4 id=\\\"client-libraries\\\">Client libraries:</h4> <ul> <li><a href=\\\"https://github.com/MONEI/monei-php-sdk\\\">PHP SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-python-sdk\\\">Python SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-node-sdk\\\">Node.js SDK</a></li> <li><a href=\\\"https://postman.monei.com/\\\">Postman</a></li> </ul> <h4 id=\\\"important\\\">Important:</h4> <p><strong>If you are not using our official SDKs, you need to provide a valid <code>User-Agent</code> header in each request, otherwise your requests will be rejected.</strong></p> \n *\n * The version of the OpenAPI document: 1.4.4\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from '../axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ActivateSubscriptionRequest\n */\nexport interface ActivateSubscriptionRequest {\n    /**\n     * A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). In case of the first one, you will also need to send the `sessionId` used to generate the token in the first place. \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    paymentToken?: string;\n    /**\n     * A unique identifier within your system that adds security to the payment process. You need to pass the same session ID as the one used on the frontend to initialize MONEI Component (if you needed to). This is required if a payment token (not permanent) was already generated in the frontend. \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    sessionId?: string;\n    /**\n     * The amount to be added to the subscription\\'s initial payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof ActivateSubscriptionRequest\n     */\n    addAmount?: number;\n    /**\n     * A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments. \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    sequenceId?: string;\n    /**\n     * The URL the customer will be directed to after transaction completed (successful or failed - except if `failUrl` is provided). \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    completeUrl?: string;\n    /**\n     * The URL the customer will be directed to after transaction has failed, instead of `completeUrl` (used in hosted payment page). This allows to provide two different URLs for successful and failed payments. \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    failUrl?: string;\n    /**\n     * The URL the customer will be directed to if they decide to cancel payment and return to your website (used in hosted payment page). \n     * @type {string}\n     * @memberof ActivateSubscriptionRequest\n     */\n    cancelUrl?: string;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof ActivateSubscriptionRequest\n     */\n    metadata?: object;\n}\n/**\n * \n * @export\n * @interface Address\n */\nexport interface Address {\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof Address\n     */\n    country?: string;\n    /**\n     * City, district, suburb, town, or village.\n     * @type {string}\n     * @memberof Address\n     */\n    city?: string;\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     * @type {string}\n     * @memberof Address\n     */\n    line1?: string;\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     * @type {string}\n     * @memberof Address\n     */\n    line2?: string;\n    /**\n     * ZIP or postal code.\n     * @type {string}\n     * @memberof Address\n     */\n    zip?: string;\n    /**\n     * State, county, province, or region.\n     * @type {string}\n     * @memberof Address\n     */\n    state?: string;\n}\n/**\n * \n * @export\n * @interface CancelPaymentRequest\n */\nexport interface CancelPaymentRequest {\n    /**\n     * \n     * @type {PaymentCancellationReason}\n     * @memberof CancelPaymentRequest\n     */\n    cancellationReason?: PaymentCancellationReason;\n}\n/**\n * \n * @export\n * @interface CancelSubscriptionRequest\n */\nexport interface CancelSubscriptionRequest {\n    /**\n     * If true, the subscription will be canceled at the end of the current period. \n     * @type {boolean}\n     * @memberof CancelSubscriptionRequest\n     */\n    cancelAtPeriodEnd?: boolean;\n}\n/**\n * \n * @export\n * @interface CapturePaymentRequest\n */\nexport interface CapturePaymentRequest {\n    /**\n     * The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. \n     * @type {number}\n     * @memberof CapturePaymentRequest\n     */\n    amount?: number;\n}\n/**\n * \n * @export\n * @interface ConfirmPaymentRequest\n */\nexport interface ConfirmPaymentRequest {\n    /**\n     * A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). \n     * @type {string}\n     * @memberof ConfirmPaymentRequest\n     */\n    paymentToken: string;\n    /**\n     * \n     * @type {ConfirmPaymentRequestPaymentMethod}\n     * @memberof ConfirmPaymentRequest\n     */\n    paymentMethod?: ConfirmPaymentRequestPaymentMethod;\n    /**\n     * If set to true a permanent token that represents a payment method used in the payment will be generated. \n     * @type {boolean}\n     * @memberof ConfirmPaymentRequest\n     */\n    generatePaymentToken?: boolean;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof ConfirmPaymentRequest\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof ConfirmPaymentRequest\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof ConfirmPaymentRequest\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof ConfirmPaymentRequest\n     */\n    metadata?: object;\n}\n/**\n * Additional information about the payment method used for this payment.\n * @export\n * @interface ConfirmPaymentRequestPaymentMethod\n */\nexport interface ConfirmPaymentRequestPaymentMethod {\n    /**\n     * \n     * @type {ConfirmPaymentRequestPaymentMethodCard}\n     * @memberof ConfirmPaymentRequestPaymentMethod\n     */\n    card?: ConfirmPaymentRequestPaymentMethodCard;\n}\n/**\n * Additional information about the card used for this payment.\n * @export\n * @interface ConfirmPaymentRequestPaymentMethodCard\n */\nexport interface ConfirmPaymentRequestPaymentMethodCard {\n    /**\n     * The cardholder\\'s name, as stated in the credit card.\n     * @type {string}\n     * @memberof ConfirmPaymentRequestPaymentMethodCard\n     */\n    cardholderName?: string;\n    /**\n     * The cardholder\\'s email address.\n     * @type {string}\n     * @memberof ConfirmPaymentRequestPaymentMethodCard\n     */\n    cardholderEmail?: string;\n}\n/**\n * \n * @export\n * @interface CreatePaymentRequest\n */\nexport interface CreatePaymentRequest {\n    /**\n     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof CreatePaymentRequest\n     */\n    amount: number;\n    /**\n     * Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    currency: string;\n    /**\n     * An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    orderId: string;\n    /**\n     * The URL to which a payment result should be sent asynchronously. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    callbackUrl?: string;\n    /**\n     * The URL the customer will be directed to after transaction completed (successful or failed - except if `failUrl` is provided). \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    completeUrl?: string;\n    /**\n     * The URL the customer will be directed to after transaction has failed, instead of `completeUrl` (used in hosted payment page). This allows to provide two different URLs for successful and failed payments. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    failUrl?: string;\n    /**\n     * The URL the customer will be directed to if they decide to cancel payment and return to your website (used in hosted payment page). \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    cancelUrl?: string;\n    /**\n     * A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). In case of the first one, you will also need to send the `sessionId` used to generate the token in the first place. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    paymentToken?: string;\n    /**\n     * A unique identifier within your system that adds security to the payment process. You need to pass the same session ID as the one used on the frontend to initialize MONEI Component (if you needed to). This is required if a payment token (not permanent) was already generated in the frontend. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    sessionId?: string;\n    /**\n     * If set to true a permanent token that represents a payment method used in the payment will be generated. \n     * @type {boolean}\n     * @memberof CreatePaymentRequest\n     */\n    generatePaymentToken?: boolean;\n    /**\n     * \n     * @type {PaymentPaymentMethodInput}\n     * @memberof CreatePaymentRequest\n     */\n    paymentMethod?: PaymentPaymentMethodInput;\n    /**\n     * \n     * @type {PaymentPaymentMethods}\n     * @memberof CreatePaymentRequest\n     */\n    allowedPaymentMethods?: PaymentPaymentMethods;\n    /**\n     * \n     * @type {PaymentTransactionType}\n     * @memberof CreatePaymentRequest\n     */\n    transactionType?: PaymentTransactionType;\n    /**\n     * \n     * @type {PaymentSequence}\n     * @memberof CreatePaymentRequest\n     */\n    sequence?: PaymentSequence;\n    /**\n     * A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    pointOfSaleId?: string;\n    /**\n     * A unique identifier of the Subscription. If specified the payment is attached to this Subscription. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    subscriptionId?: string;\n    /**\n     * If set to `true`, the new payment will be automatically created when customer visits the payment link of the previously failed payment. Is automatically set to `true` if `completeUrl` is not provided.(set this value to `true` to create \\\"Pay By Link\\\" payments).\n     * @type {boolean}\n     * @memberof CreatePaymentRequest\n     */\n    autoRecover?: boolean;\n    /**\n     * An arbitrary string attached to the payment. Often useful for displaying to users. \n     * @type {string}\n     * @memberof CreatePaymentRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof CreatePaymentRequest\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof CreatePaymentRequest\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof CreatePaymentRequest\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * \n     * @type {PaymentSessionDetails}\n     * @memberof CreatePaymentRequest\n     */\n    sessionDetails?: PaymentSessionDetails;\n    /**\n     * Payment expiration time.\n     * @type {number}\n     * @memberof CreatePaymentRequest\n     */\n    expireAt?: number;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof CreatePaymentRequest\n     */\n    metadata?: object;\n}\n/**\n * \n * @export\n * @interface CreateSubscriptionRequest\n */\nexport interface CreateSubscriptionRequest {\n    /**\n     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof CreateSubscriptionRequest\n     */\n    amount: number;\n    /**\n     * Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency. \n     * @type {string}\n     * @memberof CreateSubscriptionRequest\n     */\n    currency: string;\n    /**\n     * \n     * @type {SubscriptionInterval}\n     * @memberof CreateSubscriptionRequest\n     */\n    interval: SubscriptionInterval;\n    /**\n     * Number of intervals between subscription payments.\n     * @type {number}\n     * @memberof CreateSubscriptionRequest\n     */\n    intervalCount?: number;\n    /**\n     * An arbitrary string attached to the subscription. Often useful for displaying to users. \n     * @type {string}\n     * @memberof CreateSubscriptionRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof CreateSubscriptionRequest\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof CreateSubscriptionRequest\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof CreateSubscriptionRequest\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * The end date of the trial period. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof CreateSubscriptionRequest\n     */\n    trialPeriodEnd?: number;\n    /**\n     * Number of days the trial period lasts.\n     * @type {number}\n     * @memberof CreateSubscriptionRequest\n     */\n    trialPeriodDays?: number;\n    /**\n     * The URL will be called each time subscription status changes. You will receive a subscription object in the body of the request. \n     * @type {string}\n     * @memberof CreateSubscriptionRequest\n     */\n    callbackUrl?: string;\n    /**\n     * The URL will be called each time subscription creates a new payments. You will receive the payment object in the body of the request. \n     * @type {string}\n     * @memberof CreateSubscriptionRequest\n     */\n    paymentCallbackUrl?: string;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof CreateSubscriptionRequest\n     */\n    metadata?: object;\n}\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineResponse200\n     */\n    success?: boolean;\n}\n/**\n * \n * @export\n * @interface InlineResponse2001\n */\nexport interface InlineResponse2001 {\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineResponse2001\n     */\n    isValid?: boolean;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    message: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ModelError\n     */\n    code?: number;\n}\n/**\n * \n * @export\n * @interface PauseSubscriptionRequest\n */\nexport interface PauseSubscriptionRequest {\n    /**\n     * If true, the subscription will be paused at the end of the current period. \n     * @type {boolean}\n     * @memberof PauseSubscriptionRequest\n     */\n    pauseAtPeriodEnd?: boolean;\n    /**\n     * Number of intervals when subscription will be paused before it activates again.\n     * @type {number}\n     * @memberof PauseSubscriptionRequest\n     */\n    pauseIntervalCount?: number;\n}\n/**\n * \n * @export\n * @interface Payment\n */\nexport interface Payment {\n    /**\n     * Unique identifier for the payment.\n     * @type {string}\n     * @memberof Payment\n     */\n    id?: string;\n    /**\n     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof Payment\n     */\n    amount?: number;\n    /**\n     * Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency. \n     * @type {string}\n     * @memberof Payment\n     */\n    currency?: string;\n    /**\n     * An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system. \n     * @type {string}\n     * @memberof Payment\n     */\n    orderId?: string;\n    /**\n     * An arbitrary string attached to the payment. Often useful for displaying to users. \n     * @type {string}\n     * @memberof Payment\n     */\n    description?: string;\n    /**\n     * MONEI Account identifier.\n     * @type {string}\n     * @memberof Payment\n     */\n    accountId?: string;\n    /**\n     * Unique identifier provided by the bank performing transaction. \n     * @type {string}\n     * @memberof Payment\n     */\n    authorizationCode?: string;\n    /**\n     * Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.\n     * @type {boolean}\n     * @memberof Payment\n     */\n    livemode?: boolean;\n    /**\n     * \n     * @type {PaymentStatus}\n     * @memberof Payment\n     */\n    status?: PaymentStatus;\n    /**\n     * Payment status code. \n     * @type {string}\n     * @memberof Payment\n     */\n    statusCode?: string;\n    /**\n     * Human readable status message, can be displayed to a user. \n     * @type {string}\n     * @memberof Payment\n     */\n    statusMessage?: string;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof Payment\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentShop}\n     * @memberof Payment\n     */\n    shop?: PaymentShop;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof Payment\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof Payment\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * Amount in cents refunded (can be less than the amount attribute on the payment if a partial refund was issued). \n     * @type {number}\n     * @memberof Payment\n     */\n    refundedAmount?: number;\n    /**\n     * Amount in cents refunded in the last transaction.\n     * @type {number}\n     * @memberof Payment\n     */\n    lastRefundAmount?: number;\n    /**\n     * \n     * @type {PaymentLastRefundReason}\n     * @memberof Payment\n     */\n    lastRefundReason?: PaymentLastRefundReason;\n    /**\n     * \n     * @type {PaymentCancellationReason}\n     * @memberof Payment\n     */\n    cancellationReason?: PaymentCancellationReason;\n    /**\n     * \n     * @type {PaymentSessionDetails}\n     * @memberof Payment\n     */\n    sessionDetails?: PaymentSessionDetails;\n    /**\n     * \n     * @type {PaymentTraceDetails}\n     * @memberof Payment\n     */\n    traceDetails?: PaymentTraceDetails;\n    /**\n     * A permanent token represents a payment method used in the payment. Pass `generatePaymentToken: true` when you creating a payment to generate it. You can pass it as `paymentToken` parameter to create other payments with the same payment method. This token does not expire, and should only be used server-side. \n     * @type {string}\n     * @memberof Payment\n     */\n    paymentToken?: string;\n    /**\n     * \n     * @type {PaymentPaymentMethod}\n     * @memberof Payment\n     */\n    paymentMethod?: PaymentPaymentMethod;\n    /**\n     * \n     * @type {PaymentSequence}\n     * @memberof Payment\n     */\n    sequence?: PaymentSequence;\n    /**\n     * A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments. \n     * @type {string}\n     * @memberof Payment\n     */\n    sequenceId?: string;\n    /**\n     * A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code. \n     * @type {string}\n     * @memberof Payment\n     */\n    pointOfSaleId?: string;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof Payment\n     */\n    metadata?: object;\n    /**\n     * \n     * @type {PaymentNextAction}\n     * @memberof Payment\n     */\n    nextAction?: PaymentNextAction;\n    /**\n     * Time at which the resource was created. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Payment\n     */\n    createdAt?: number;\n    /**\n     * Time at which the resource updated last time. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Payment\n     */\n    updatedAt?: number;\n}\n/**\n * Billing information associated with the payment method at the time of the transaction. \n * @export\n * @interface PaymentBillingDetails\n */\nexport interface PaymentBillingDetails {\n    /**\n     * The customer’s billing full name.\n     * @type {string}\n     * @memberof PaymentBillingDetails\n     */\n    name?: string;\n    /**\n     * The customer’s billing email address.\n     * @type {string}\n     * @memberof PaymentBillingDetails\n     */\n    email?: string;\n    /**\n     * The customer’s billing phone number.\n     * @type {string}\n     * @memberof PaymentBillingDetails\n     */\n    phone?: string;\n    /**\n     * Billing company name.\n     * @type {string}\n     * @memberof PaymentBillingDetails\n     */\n    company?: string;\n    /**\n     * Company tax ID.\n     * @type {string}\n     * @memberof PaymentBillingDetails\n     */\n    taxId?: string;\n    /**\n     * \n     * @type {Address}\n     * @memberof PaymentBillingDetails\n     */\n    address?: Address;\n}\n/**\n * The reason for canceling the Payment.\n * @export\n * @enum {string}\n */\nexport enum PaymentCancellationReason {\n    duplicated = 'duplicated',\n    fraudulent = 'fraudulent',\n    requested_by_customer = 'requested_by_customer'\n}\n\n/**\n * \n * @export\n * @interface PaymentCustomer\n */\nexport interface PaymentCustomer {\n    /**\n     * The customer’s email address.\n     * @type {string}\n     * @memberof PaymentCustomer\n     */\n    email?: string;\n    /**\n     * The customer’s full name or business name.\n     * @type {string}\n     * @memberof PaymentCustomer\n     */\n    name?: string;\n    /**\n     * The customer’s phone number.\n     * @type {string}\n     * @memberof PaymentCustomer\n     */\n    phone?: string;\n}\n/**\n * The reason of the last refund transaction.\n * @export\n * @enum {string}\n */\nexport enum PaymentLastRefundReason {\n    duplicated = 'duplicated',\n    fraudulent = 'fraudulent',\n    requested_by_customer = 'requested_by_customer'\n}\n\n/**\n * The channel used to send the payment message. \n * @export\n * @enum {string}\n */\nexport enum PaymentMessageChannel {\n    EMAIL = 'EMAIL',\n    WHATSAPP = 'WHATSAPP',\n    SMS = 'SMS'\n}\n\n/**\n * The language of message sent to the customer. If not provided the default customer language is used if available.\n * @export\n * @enum {string}\n */\nexport enum PaymentMessageLanguage {\n    en = 'en',\n    es = 'es',\n    ca = 'ca',\n    pt = 'pt',\n    de = 'de',\n    it = 'it',\n    fr = 'fr'\n}\n\n/**\n * If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. \n * @export\n * @interface PaymentNextAction\n */\nexport interface PaymentNextAction {\n    /**\n     * - `CONFIRM` - Your customer needs to be redirected to a   [hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)   or confirm payment using   [payment token](https://docs.monei.com/docs/accept-card-payment#3-submitting-the-payment-to-monei-client-side).   The **redirectUrl** will point to the hosted payment page. - `FRICTIONLESS_CHALLENGE` - Your customer needs to be redirected to the frictionless    3d secure challenge page provided by the bank. The **redirectUrl**    will point to the frictionless 3d secure challenge page provided by the bank. - `CHALLENGE` - Your customer needs to be redirected to the   3d secure challenge page provided by the bank. The **redirectUrl**   will point to the 3d secure challenge page provided by the bank. - `COMPLETE` - The payment is completed. The **redirectUrl** will be   the **completeUrl** if it was provided when the payment was created. - `BIZUM_CHALLENGE` - Your customer will be redirected to the Bizum hosted payment page. \n     * @type {string}\n     * @memberof PaymentNextAction\n     */\n    type?: PaymentNextActionTypeEnum;\n    /**\n     * If `true` you have to redirect your customer to the **redirectUrl** to continue payment process. \n     * @type {boolean}\n     * @memberof PaymentNextAction\n     */\n    mustRedirect?: boolean;\n    /**\n     * Redirect your customer to this url to continue payment process. \n     * @type {string}\n     * @memberof PaymentNextAction\n     */\n    redirectUrl?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentNextActionTypeEnum {\n    CONFIRM = 'CONFIRM',\n    CHALLENGE = 'CHALLENGE',\n    FRICTIONLESS_CHALLENGE = 'FRICTIONLESS_CHALLENGE',\n    BIZUM_CHALLENGE = 'BIZUM_CHALLENGE',\n    COMPLETE = 'COMPLETE'\n}\n\n/**\n * Details about the payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethod\n */\nexport interface PaymentPaymentMethod {\n    /**\n     * Payment method type.\n     * @type {string}\n     * @memberof PaymentPaymentMethod\n     */\n    method?: PaymentPaymentMethodMethodEnum;\n    /**\n     * \n     * @type {PaymentPaymentMethodCard}\n     * @memberof PaymentPaymentMethod\n     */\n    card?: PaymentPaymentMethodCard;\n    /**\n     * \n     * @type {PaymentPaymentMethodBizum}\n     * @memberof PaymentPaymentMethod\n     */\n    bizum?: PaymentPaymentMethodBizum;\n    /**\n     * \n     * @type {PaymentPaymentMethodPaypal}\n     * @memberof PaymentPaymentMethod\n     */\n    paypal?: PaymentPaymentMethodPaypal;\n    /**\n     * \n     * @type {PaymentPaymentMethodCofidis}\n     * @memberof PaymentPaymentMethod\n     */\n    cofidis?: PaymentPaymentMethodCofidis;\n    /**\n     * \n     * @type {PaymentPaymentMethodCofidis}\n     * @memberof PaymentPaymentMethod\n     */\n    cofidisLoan?: PaymentPaymentMethodCofidis;\n    /**\n     * \n     * @type {PaymentPaymentMethodMbway}\n     * @memberof PaymentPaymentMethod\n     */\n    mbway?: PaymentPaymentMethodMbway;\n    /**\n     * \n     * @type {PaymentPaymentMethodTrustly}\n     * @memberof PaymentPaymentMethod\n     */\n    trustly?: PaymentPaymentMethodTrustly;\n    /**\n     * \n     * @type {PaymentPaymentMethodSepa}\n     * @memberof PaymentPaymentMethod\n     */\n    sepa?: PaymentPaymentMethodSepa;\n    /**\n     * \n     * @type {PaymentPaymentMethodKlarna}\n     * @memberof PaymentPaymentMethod\n     */\n    klarna?: PaymentPaymentMethodKlarna;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodMethodEnum {\n    card = 'card',\n    bizum = 'bizum',\n    googlePay = 'googlePay',\n    applePay = 'applePay',\n    clickToPay = 'clickToPay',\n    paypal = 'paypal',\n    cofidis = 'cofidis',\n    cofidisLoan = 'cofidisLoan',\n    iDeal = 'iDeal',\n    mbway = 'mbway',\n    multibanco = 'multibanco',\n    sofort = 'sofort',\n    trustly = 'trustly',\n    sepa = 'sepa',\n    klarna = 'klarna',\n    giropay = 'giropay'\n}\n\n/**\n * Details about the Bizum account used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodBizum\n */\nexport interface PaymentPaymentMethodBizum {\n    /**\n     * The phone number used to pay with `bizum`.\n     * @type {string}\n     * @memberof PaymentPaymentMethodBizum\n     */\n    phoneNumber?: string;\n}\n/**\n * Details about the Bizum account used for this payment. If provided phone number is valid and registered in Bizum, MONEI will try to confirm the payment directly. \n * @export\n * @interface PaymentPaymentMethodBizumInput\n */\nexport interface PaymentPaymentMethodBizumInput {\n    /**\n     * The phone number used to pay with `bizum`.\n     * @type {string}\n     * @memberof PaymentPaymentMethodBizumInput\n     */\n    phoneNumber?: string;\n}\n/**\n * Details about the card used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodCard\n */\nexport interface PaymentPaymentMethodCard {\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    country?: string;\n    /**\n     * Card brand.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    brand?: PaymentPaymentMethodCardBrandEnum;\n    /**\n     * Card type `debit` or `credit`.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    type?: PaymentPaymentMethodCardTypeEnum;\n    /**\n     * Whether this transaction used 3D Secure authentication.\n     * @type {boolean}\n     * @memberof PaymentPaymentMethodCard\n     */\n    threeDSecure?: boolean;\n    /**\n     * The protocol version of the 3DS challenge.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    threeDSecureVersion?: string;\n    /**\n     * The flow used for 3DS authentication. - `CHALLENGE` - In a challenge flow, the issuer requires additional shopper interaction, either through biometrics, two-factor authentication, or similar methods based on [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) factors. - `FRICTIONLESS` - In a frictionless flow, the acquirer, issuer, and card scheme exchange all necessary     information in the background through passive authentication using the shopper\\'s device     fingerprint. The transaction is completed without further shopper interaction. - `FRICTIONLESS_CHALLENGE` - This flow is the complete 3DS flow. It is similar to the 3DS frictionless flow but     includes an additional authentication step (challenge) that will be invoked if the     information provided in the data collection step does not suffice to determine the     risk-level of the transaction. - `DIRECT` - This transaction did not require [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) due to the low risk \n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    threeDSecureFlow?: PaymentPaymentMethodCardThreeDSecureFlowEnum;\n    /**\n     * Time at which the card will expire. Measured in seconds since the Unix epoch. \n     * @type {number}\n     * @memberof PaymentPaymentMethodCard\n     */\n    expiration?: number;\n    /**\n     * The last four digits of the card.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    last4?: string;\n    /**\n     * The digital wallet used to tokenize the card.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    tokenizationMethod?: PaymentPaymentMethodCardTokenizationMethodEnum;\n    /**\n     * The name of the cardholder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    cardholderName?: string;\n    /**\n     * The email of the cardholder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCard\n     */\n    cardholderEmail?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodCardBrandEnum {\n    visa = 'visa',\n    mastercard = 'mastercard',\n    diners = 'diners',\n    amex = 'amex',\n    jcb = 'jcb',\n    unionpay = 'unionpay',\n    unknown = 'unknown'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodCardTypeEnum {\n    debit = 'debit',\n    credit = 'credit'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodCardThreeDSecureFlowEnum {\n    CHALLENGE = 'CHALLENGE',\n    FRICTIONLESS = 'FRICTIONLESS',\n    FRICTIONLESS_CHALLENGE = 'FRICTIONLESS_CHALLENGE',\n    DIRECT = 'DIRECT'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodCardTokenizationMethodEnum {\n    applePay = 'applePay',\n    googlePay = 'googlePay',\n    clickToPay = 'clickToPay'\n}\n\n/**\n * Details about the card used as payment method. If provided, MONEI will try to confirm the payment directly. \n * @export\n * @interface PaymentPaymentMethodCardInput\n */\nexport interface PaymentPaymentMethodCardInput {\n    /**\n     * The card number, as a string without any separators.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    number?: string;\n    /**\n     * Card security code.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    cvc?: string;\n    /**\n     * Two-digit number representing the card’s expiration month.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    expMonth?: string;\n    /**\n     * Two-digit number representing the card’s expiration year.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    expYear?: string;\n    /**\n     * The cardholder\\'s name, as stated in the credit card.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    cardholderName?: string;\n    /**\n     * The cardholder\\'s email address.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCardInput\n     */\n    cardholderEmail?: string;\n}\n/**\n * Details from Cofidis order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodCofidis\n */\nexport interface PaymentPaymentMethodCofidis {\n    /**\n     * The Cofidis\\' order ID.\n     * @type {string}\n     * @memberof PaymentPaymentMethodCofidis\n     */\n    orderId?: string;\n}\n/**\n * An information about a payment method used for this payment. We recommend using `paymentToken` instead, as it is more secure way to pass sensitive payment information. Processing credit card information on your server requires [PCI DSS compliance](https://www.investopedia.com/terms/p/pci-compliance.asp). \n * @export\n * @interface PaymentPaymentMethodInput\n */\nexport interface PaymentPaymentMethodInput {\n    /**\n     * \n     * @type {PaymentPaymentMethodCardInput}\n     * @memberof PaymentPaymentMethodInput\n     */\n    card?: PaymentPaymentMethodCardInput;\n    /**\n     * \n     * @type {PaymentPaymentMethodBizumInput}\n     * @memberof PaymentPaymentMethodInput\n     */\n    bizum?: PaymentPaymentMethodBizumInput;\n}\n/**\n * Details from Klarna order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodKlarna\n */\nexport interface PaymentPaymentMethodKlarna {\n    /**\n     * \n     * @type {Enum}\n     * @memberof PaymentPaymentMethodKlarna\n     */\n    billingCategory?: PaymentPaymentMethodKlarnaBillingCategoryEnum;\n    /**\n     * \n     * @type {Enum}\n     * @memberof PaymentPaymentMethodKlarna\n     */\n    authPaymentMethod?: PaymentPaymentMethodKlarnaAuthPaymentMethodEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodKlarnaBillingCategoryEnum {\n    PAY_LATER = 'PAY_LATER',\n    PAY_NOW = 'PAY_NOW',\n    SLICE_IT = 'SLICE_IT',\n    SLICE_IT_BY_CARD = 'SLICE_IT_BY_CARD'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentPaymentMethodKlarnaAuthPaymentMethodEnum {\n    invoice = 'invoice',\n    fixed_amount = 'fixed_amount',\n    pix = 'pix',\n    base_account = 'base_account',\n    deferred_interest = 'deferred_interest',\n    direct_debit = 'direct_debit',\n    direct_bank_transfer = 'direct_bank_transfer',\n    b2b_invoice = 'b2b_invoice',\n    card = 'card',\n    slice_it_by_card = 'slice_it_by_card'\n}\n\n/**\n * Details from MBWay order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodMbway\n */\nexport interface PaymentPaymentMethodMbway {\n    /**\n     * The phone number used to pay with `mbway`.\n     * @type {string}\n     * @memberof PaymentPaymentMethodMbway\n     */\n    phoneNumber?: string;\n}\n/**\n * Details from Paypal order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodPaypal\n */\nexport interface PaymentPaymentMethodPaypal {\n    /**\n     * The Paypal\\'s order ID.\n     * @type {string}\n     * @memberof PaymentPaymentMethodPaypal\n     */\n    orderId?: string;\n}\n/**\n * Details from SEPA order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodSepa\n */\nexport interface PaymentPaymentMethodSepa {\n    /**\n     * The address of the account holder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    accountholderAddress?: string;\n    /**\n     * The email of the account holder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    accountholderEmail?: string;\n    /**\n     * The name of the account holder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    accountholderName?: string;\n    /**\n     * The country code of the account holder.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    countryCode?: string;\n    /**\n     * The address of the bank.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    bankAddress?: string;\n    /**\n     * The code of the bank.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    bankCode?: string;\n    /**\n     * The name of the bank.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    bankName?: string;\n    /**\n     * The BIC of the bank.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    bic?: string;\n    /**\n     * The last 4 digits of the IBAN.\n     * @type {string}\n     * @memberof PaymentPaymentMethodSepa\n     */\n    last4?: string;\n}\n/**\n * Details from Trustly order used as payment method at the time of the transaction. \n * @export\n * @interface PaymentPaymentMethodTrustly\n */\nexport interface PaymentPaymentMethodTrustly {\n    /**\n     * The Trustly\\'s customer ID.\n     * @type {string}\n     * @memberof PaymentPaymentMethodTrustly\n     */\n    customerId?: string;\n}\n/**\n * An array of allowed payment methods (used in hosted payment page). Must be enabled payment methods. Possible values:   - `card`   - `bizum`   - `paypal`   - `cofidis`   - `cofidisLoan`   - `multibanco`   - `iDeal`   - `bancontact`   - `sofort`   - `trustly`   - `sepa`   - `klarna`   - `giropay` \n * @export\n * @interface PaymentPaymentMethods\n */\nexport interface PaymentPaymentMethods extends Array<string> {\n}\n/**\n * The reason for refunding the Payment.\n * @export\n * @enum {string}\n */\nexport enum PaymentRefundReason {\n    duplicated = 'duplicated',\n    fraudulent = 'fraudulent',\n    requested_by_customer = 'requested_by_customer'\n}\n\n/**\n * This field needs to be sent in order to mark the beginning of a sequence of payments (recurring/subscriptions, installments, and so). Specific configurations can be set in the inside properties (`recurring`). \n * @export\n * @interface PaymentSequence\n */\nexport interface PaymentSequence {\n    /**\n     * \n     * @type {string}\n     * @memberof PaymentSequence\n     */\n    type: PaymentSequenceTypeEnum;\n    /**\n     * \n     * @type {PaymentSequenceRecurring}\n     * @memberof PaymentSequence\n     */\n    recurring?: PaymentSequenceRecurring;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentSequenceTypeEnum {\n    recurring = 'recurring'\n}\n\n/**\n * Specific configurations for recurring payments. Will only be used when `sequence`.`type` is `recurring`. \n * @export\n * @interface PaymentSequenceRecurring\n */\nexport interface PaymentSequenceRecurring {\n    /**\n     * Date after which no further recurring payments will be performed. Must be formatted as `YYYYMMDD`. \n     * @type {string}\n     * @memberof PaymentSequenceRecurring\n     */\n    expiry?: string;\n    /**\n     * The minimum number of **days** between the different recurring payments. \n     * @type {number}\n     * @memberof PaymentSequenceRecurring\n     */\n    frequency?: number;\n}\n/**\n * Information related to the browsing session of the user who initiated the payment. \n * @export\n * @interface PaymentSessionDetails\n */\nexport interface PaymentSessionDetails {\n    /**\n     * The IP address where the operation originated.\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    ip?: string;\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    countryCode?: string;\n    /**\n     * Two-letter language code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    lang?: string;\n    /**\n     * Device type, could be `desktop`, `mobile`, `smartTV`, `tablet`.\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    deviceType?: string;\n    /**\n     * Information about the device used for the browser session (e.g., `iPhone`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    deviceModel?: string;\n    /**\n     * The browser used in this browser session (e.g., `Mobile Safari`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    browser?: string;\n    /**\n     * The version for the browser session (e.g., `13.1.1`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    browserVersion?: string;\n    /**\n     * Operation system (e.g., `iOS`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    os?: string;\n    /**\n     * Operation system version (e.g., `13.5.1`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    osVersion?: string;\n    /**\n     * The source component from where the operation was generated (mostly for our SDK\\'s).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    source?: string;\n    /**\n     * The source component version from where the operation was generated (mostly for our SDK\\'s).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    sourceVersion?: string;\n    /**\n     * Full user agent string of the browser session.\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    userAgent?: string;\n    /**\n     * Browser accept header.\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    browserAccept?: string;\n    /**\n     * The color depth of the browser session (e.g., `24`).\n     * @type {number}\n     * @memberof PaymentSessionDetails\n     */\n    browserColorDepth?: number;\n    /**\n     * The screen height of the browser session (e.g., `1152`).\n     * @type {number}\n     * @memberof PaymentSessionDetails\n     */\n    browserScreenHeight?: number;\n    /**\n     * The screen width of the browser session (e.g., `2048`).\n     * @type {number}\n     * @memberof PaymentSessionDetails\n     */\n    browserScreenWidth?: number;\n    /**\n     * The timezone offset of the browser session (e.g., `-120`).\n     * @type {string}\n     * @memberof PaymentSessionDetails\n     */\n    browserTimezoneOffset?: string;\n}\n/**\n * Shipping information associated with the payment.\n * @export\n * @interface PaymentShippingDetails\n */\nexport interface PaymentShippingDetails {\n    /**\n     * The shipping customer’s full name.\n     * @type {string}\n     * @memberof PaymentShippingDetails\n     */\n    name?: string;\n    /**\n     * The shipping customer’s email address.\n     * @type {string}\n     * @memberof PaymentShippingDetails\n     */\n    email?: string;\n    /**\n     * The shipping customer’s phone number.\n     * @type {string}\n     * @memberof PaymentShippingDetails\n     */\n    phone?: string;\n    /**\n     * Name of the company where the shipment is going.\n     * @type {string}\n     * @memberof PaymentShippingDetails\n     */\n    company?: string;\n    /**\n     * Company tax ID.\n     * @type {string}\n     * @memberof PaymentShippingDetails\n     */\n    taxId?: string;\n    /**\n     * \n     * @type {Address}\n     * @memberof PaymentShippingDetails\n     */\n    address?: Address;\n}\n/**\n * The information about the shop (used in [hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)). \n * @export\n * @interface PaymentShop\n */\nexport interface PaymentShop {\n    /**\n     * The shop name.\n     * @type {string}\n     * @memberof PaymentShop\n     */\n    name?: string;\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof PaymentShop\n     */\n    country?: string;\n}\n/**\n * The status of the payment.\n * @export\n * @enum {string}\n */\nexport enum PaymentStatus {\n    SUCCEEDED = 'SUCCEEDED',\n    PENDING = 'PENDING',\n    FAILED = 'FAILED',\n    CANCELED = 'CANCELED',\n    REFUNDED = 'REFUNDED',\n    PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n    AUTHORIZED = 'AUTHORIZED',\n    EXPIRED = 'EXPIRED'\n}\n\n/**\n * Information related to the browsing session of the user who initiated the payment. \n * @export\n * @interface PaymentTraceDetails\n */\nexport interface PaymentTraceDetails {\n    /**\n     * The IP address where the operation originated.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    ip?: string;\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    countryCode?: string;\n    /**\n     * Two-letter language code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    lang?: string;\n    /**\n     * Device type, could be `desktop`, `mobile`, `smartTV`, `tablet`.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    deviceType?: string;\n    /**\n     * Information about the device used for the browser session (e.g., `iPhone`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    deviceModel?: string;\n    /**\n     * The browser used in this browser session (e.g., `Mobile Safari`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    browser?: string;\n    /**\n     * The version for the browser session (e.g., `13.1.1`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    browserVersion?: string;\n    /**\n     * Operation system (e.g., `iOS`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    os?: string;\n    /**\n     * Operation system version (e.g., `13.5.1`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    osVersion?: string;\n    /**\n     * The source component from where the operation was generated (mostly for our SDK\\'s).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    source?: string;\n    /**\n     * The source component version from where the operation was generated (mostly for our SDK\\'s).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    sourceVersion?: string;\n    /**\n     * Full user agent string of the browser session.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    userAgent?: string;\n    /**\n     * Browser accept header.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    browserAccept?: string;\n    /**\n     * The color depth of the browser session (e.g., `24`).\n     * @type {number}\n     * @memberof PaymentTraceDetails\n     */\n    browserColorDepth?: number;\n    /**\n     * The screen height of the browser session (e.g., `1152`).\n     * @type {number}\n     * @memberof PaymentTraceDetails\n     */\n    browserScreenHeight?: number;\n    /**\n     * The screen width of the browser session (e.g., `2048`).\n     * @type {number}\n     * @memberof PaymentTraceDetails\n     */\n    browserScreenWidth?: number;\n    /**\n     * The timezone offset of the browser session (e.g., `-120`).\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    browserTimezoneOffset?: string;\n    /**\n     * The ID of the user that started the operation.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    userId?: string;\n    /**\n     * The email of the user that started the operation.\n     * @type {string}\n     * @memberof PaymentTraceDetails\n     */\n    userEmail?: string;\n}\n/**\n * Controls when the funds will be captured.   - `SALE` - **Default**. MONEI automatically captures funds     when the customer authorizes the payment.   - `AUTH` - Place a hold on the funds when the customer authorizes     the payment, but don’t capture the funds until later.   - `PAYOUT` - Send funds to the customer   - `VERIF` - Verify the card without placing a hold or capturing funds. \n * @export\n * @enum {string}\n */\nexport enum PaymentTransactionType {\n    SALE = 'SALE',\n    AUTH = 'AUTH',\n    PAYOUT = 'PAYOUT',\n    VERIF = 'VERIF'\n}\n\n/**\n * \n * @export\n * @interface RecurringPaymentRequest\n */\nexport interface RecurringPaymentRequest {\n    /**\n     * An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system. \n     * @type {string}\n     * @memberof RecurringPaymentRequest\n     */\n    orderId: string;\n    /**\n     * The amount to collected by this subsequent payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof RecurringPaymentRequest\n     */\n    amount?: number;\n    /**\n     * Same as the `transactionType` parameter from [create payment](https://docs.monei.com/api/#operation/payments_create). If not sent, it will default in the same transaction type used in the initial payment. \n     * @type {PaymentTransactionType}\n     * @memberof RecurringPaymentRequest\n     */\n    transactionType?: PaymentTransactionType;\n    /**\n     * An arbitrary string attached to the payment. Often useful for displaying to users. \n     * @type {string}\n     * @memberof RecurringPaymentRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof RecurringPaymentRequest\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof RecurringPaymentRequest\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof RecurringPaymentRequest\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * The URL to which a payment result should be sent asynchronously. \n     * @type {string}\n     * @memberof RecurringPaymentRequest\n     */\n    callbackUrl?: string;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof RecurringPaymentRequest\n     */\n    metadata?: object;\n}\n/**\n * \n * @export\n * @interface RefundPaymentRequest\n */\nexport interface RefundPaymentRequest {\n    /**\n     * The amount to refund, which must be less than or equal to the original amount. \n     * @type {number}\n     * @memberof RefundPaymentRequest\n     */\n    amount?: number;\n    /**\n     * \n     * @type {PaymentRefundReason}\n     * @memberof RefundPaymentRequest\n     */\n    refundReason?: PaymentRefundReason;\n}\n/**\n * \n * @export\n * @interface RegisterDomainRequest\n */\nexport interface RegisterDomainRequest {\n    /**\n     * The domain name to register for Apple Pay.\n     * @type {string}\n     * @memberof RegisterDomainRequest\n     */\n    domainName: string;\n}\n/**\n * \n * @export\n * @interface SendPaymentLinkRequest\n */\nexport interface SendPaymentLinkRequest {\n    /**\n     * The customer will receive payment link on this email address.\n     * @type {string}\n     * @memberof SendPaymentLinkRequest\n     */\n    customerEmail?: string;\n    /**\n     * Phone number in E.164 format. The customer will receive payment link on this phone number.\n     * @type {string}\n     * @memberof SendPaymentLinkRequest\n     */\n    customerPhone?: string;\n    /**\n     * \n     * @type {PaymentMessageChannel}\n     * @memberof SendPaymentLinkRequest\n     */\n    channel?: PaymentMessageChannel;\n    /**\n     * \n     * @type {PaymentMessageLanguage}\n     * @memberof SendPaymentLinkRequest\n     */\n    language?: PaymentMessageLanguage;\n}\n/**\n * \n * @export\n * @interface SendPaymentReceiptRequest\n */\nexport interface SendPaymentReceiptRequest {\n    /**\n     * The customer will receive payment receipt on this email address.\n     * @type {string}\n     * @memberof SendPaymentReceiptRequest\n     */\n    customerEmail?: string;\n    /**\n     * Phone number in E.164 format. The customer will receive payment receipt link on this phone number.\n     * @type {string}\n     * @memberof SendPaymentReceiptRequest\n     */\n    customerPhone?: string;\n    /**\n     * \n     * @type {PaymentMessageChannel}\n     * @memberof SendPaymentReceiptRequest\n     */\n    channel?: PaymentMessageChannel;\n    /**\n     * \n     * @type {PaymentMessageLanguage}\n     * @memberof SendPaymentReceiptRequest\n     */\n    language?: PaymentMessageLanguage;\n}\n/**\n * \n * @export\n * @interface SendPaymentRequest\n */\nexport interface SendPaymentRequest {\n    /**\n     * Phone number in E.164 format. The customer will receive payment link on this phone number.\n     * @type {string}\n     * @memberof SendPaymentRequest\n     */\n    phoneNumber: string;\n    /**\n     * \n     * @type {PaymentMessageLanguage}\n     * @memberof SendPaymentRequest\n     */\n    language?: PaymentMessageLanguage;\n}\n/**\n * \n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n    /**\n     * Unique identifier for the subscription.\n     * @type {string}\n     * @memberof Subscription\n     */\n    id?: string;\n    /**\n     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof Subscription\n     */\n    amount?: number;\n    /**\n     * Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency. \n     * @type {string}\n     * @memberof Subscription\n     */\n    currency?: string;\n    /**\n     * An arbitrary string attached to the subscription. Often useful for displaying to users. \n     * @type {string}\n     * @memberof Subscription\n     */\n    description?: string;\n    /**\n     * MONEI Account identifier.\n     * @type {string}\n     * @memberof Subscription\n     */\n    accountId?: string;\n    /**\n     * Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.\n     * @type {boolean}\n     * @memberof Subscription\n     */\n    livemode?: boolean;\n    /**\n     * \n     * @type {SubscriptionStatus}\n     * @memberof Subscription\n     */\n    status?: SubscriptionStatus;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof Subscription\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof Subscription\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof Subscription\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * \n     * @type {SubscriptionInterval}\n     * @memberof Subscription\n     */\n    interval?: SubscriptionInterval;\n    /**\n     * Number of intervals between subscription payments.\n     * @type {number}\n     * @memberof Subscription\n     */\n    intervalCount?: number;\n    /**\n     * Number of intervals when subscription will be paused before it activates again.\n     * @type {number}\n     * @memberof Subscription\n     */\n    pauseIntervalCount?: number;\n    /**\n     * An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system. \n     * @type {string}\n     * @memberof Subscription\n     */\n    lastOrderId?: string;\n    /**\n     * \n     * @type {SubscriptionLastPayment}\n     * @memberof Subscription\n     */\n    lastPayment?: SubscriptionLastPayment;\n    /**\n     * \n     * @type {SubscriptionPaymentMethod}\n     * @memberof Subscription\n     */\n    paymentMethod?: SubscriptionPaymentMethod;\n    /**\n     * The start date of the current subscription period. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Subscription\n     */\n    currentPeriodStart?: number;\n    /**\n     * The end date of the current subscription period. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Subscription\n     */\n    currentPeriodEnd?: number;\n    /**\n     * The end date of the trial period. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Subscription\n     */\n    trialPeriodEnd?: number;\n    /**\n     * The date when the next payment will be made.\n     * @type {number}\n     * @memberof Subscription\n     */\n    nextPaymentAt?: number;\n    /**\n     * Number of retries left for the subscription.\n     * @type {number}\n     * @memberof Subscription\n     */\n    retryCount?: number;\n    /**\n     * If true, the subscription will be canceled at the end of the current period. \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    cancelAtPeriodEnd?: boolean;\n    /**\n     * If true, the subscription will be paused at the end of the current period. \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    pauseAtPeriodEnd?: boolean;\n    /**\n     * \n     * @type {PaymentTraceDetails}\n     * @memberof Subscription\n     */\n    traceDetails?: PaymentTraceDetails;\n    /**\n     * A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments. \n     * @type {string}\n     * @memberof Subscription\n     */\n    sequenceId?: string;\n    /**\n     * The URL will be called each time subscription status changes. You will receive a subscription object in the body of the request. \n     * @type {string}\n     * @memberof Subscription\n     */\n    callbackUrl?: string;\n    /**\n     * The URL will be called each time subscription creates a new payments. You will receive the payment object in the body of the request. \n     * @type {string}\n     * @memberof Subscription\n     */\n    paymentCallbackUrl?: string;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof Subscription\n     */\n    metadata?: object;\n    /**\n     * Time at which the resource was created. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Subscription\n     */\n    createdAt?: number;\n    /**\n     * Time at which the resource updated last time. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof Subscription\n     */\n    updatedAt?: number;\n}\n/**\n * Subscription interval.\n * @export\n * @enum {string}\n */\nexport enum SubscriptionInterval {\n    day = 'day',\n    week = 'week',\n    month = 'month',\n    year = 'year'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionLastPayment\n */\nexport interface SubscriptionLastPayment {\n    /**\n     * Unique identifier for the payment.\n     * @type {string}\n     * @memberof SubscriptionLastPayment\n     */\n    id?: string;\n    /**\n     * \n     * @type {PaymentStatus}\n     * @memberof SubscriptionLastPayment\n     */\n    status?: PaymentStatus;\n    /**\n     * Payment status code. \n     * @type {string}\n     * @memberof SubscriptionLastPayment\n     */\n    statusCode?: string;\n    /**\n     * Human readable status message, can be displayed to a user. \n     * @type {string}\n     * @memberof SubscriptionLastPayment\n     */\n    statusMessage?: string;\n}\n/**\n * Details about the payment method at the time of the transaction. \n * @export\n * @interface SubscriptionPaymentMethod\n */\nexport interface SubscriptionPaymentMethod {\n    /**\n     * Subscription method type.\n     * @type {string}\n     * @memberof SubscriptionPaymentMethod\n     */\n    method?: SubscriptionPaymentMethodMethodEnum;\n    /**\n     * \n     * @type {PaymentPaymentMethodCard}\n     * @memberof SubscriptionPaymentMethod\n     */\n    card?: PaymentPaymentMethodCard;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPaymentMethodMethodEnum {\n    card = 'card'\n}\n\n/**\n * Details about the card used as payment method at the time of the transaction. \n * @export\n * @interface SubscriptionPaymentMethodCard\n */\nexport interface SubscriptionPaymentMethodCard {\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     * @type {string}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    country?: string;\n    /**\n     * Card brand.\n     * @type {string}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    brand?: SubscriptionPaymentMethodCardBrandEnum;\n    /**\n     * Card type `debit` or `credit`.\n     * @type {string}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    type?: SubscriptionPaymentMethodCardTypeEnum;\n    /**\n     * Wether this transaction used 3D Secure authentication.\n     * @type {boolean}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    threeDSecure?: boolean;\n    /**\n     * The protocol version of the 3DS challenge.\n     * @type {string}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    threeDSecureVersion?: string;\n    /**\n     * Time at which the card will expire. Measured in seconds since the Unix epoch. \n     * @type {number}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    expiration?: number;\n    /**\n     * The last four digits of the card.\n     * @type {string}\n     * @memberof SubscriptionPaymentMethodCard\n     */\n    last4?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPaymentMethodCardBrandEnum {\n    visa = 'visa',\n    mastercard = 'mastercard',\n    diners = 'diners',\n    amex = 'amex',\n    jcb = 'jcb',\n    unionpay = 'unionpay',\n    unknown = 'unknown'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPaymentMethodCardTypeEnum {\n    debit = 'debit',\n    credit = 'credit'\n}\n\n/**\n * The status of the subscription.\n * @export\n * @enum {string}\n */\nexport enum SubscriptionStatus {\n    PENDING = 'PENDING',\n    EXPIRED = 'EXPIRED',\n    TRIALING = 'TRIALING',\n    ACTIVE = 'ACTIVE',\n    PAST_DUE = 'PAST_DUE',\n    PAUSED = 'PAUSED',\n    CANCELED = 'CANCELED'\n}\n\n/**\n * \n * @export\n * @interface UpdateSubscriptionRequest\n */\nexport interface UpdateSubscriptionRequest {\n    /**\n     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). \n     * @type {number}\n     * @memberof UpdateSubscriptionRequest\n     */\n    amount?: number;\n    /**\n     * \n     * @type {SubscriptionInterval}\n     * @memberof UpdateSubscriptionRequest\n     */\n    interval?: SubscriptionInterval;\n    /**\n     * Number of intervals between subscription payments.\n     * @type {number}\n     * @memberof UpdateSubscriptionRequest\n     */\n    intervalCount?: number;\n    /**\n     * An arbitrary string attached to the subscription. Often useful for displaying to users. \n     * @type {string}\n     * @memberof UpdateSubscriptionRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {PaymentCustomer}\n     * @memberof UpdateSubscriptionRequest\n     */\n    customer?: PaymentCustomer;\n    /**\n     * \n     * @type {PaymentBillingDetails}\n     * @memberof UpdateSubscriptionRequest\n     */\n    billingDetails?: PaymentBillingDetails;\n    /**\n     * \n     * @type {PaymentShippingDetails}\n     * @memberof UpdateSubscriptionRequest\n     */\n    shippingDetails?: PaymentShippingDetails;\n    /**\n     * The end date of the trial period. Measured in seconds since the Unix epoch.\n     * @type {number}\n     * @memberof UpdateSubscriptionRequest\n     */\n    trialPeriodEnd?: number;\n    /**\n     * The URL will be called each time subscription status changes. You will receive a subscription object in the body of the request. \n     * @type {string}\n     * @memberof UpdateSubscriptionRequest\n     */\n    callbackUrl?: string;\n    /**\n     * The URL will be called each time subscription creates a new payments. You will receive the payment object in the body of the request. \n     * @type {string}\n     * @memberof UpdateSubscriptionRequest\n     */\n    paymentCallbackUrl?: string;\n    /**\n     * If true, the subscription will be paused at the end of the current period. \n     * @type {boolean}\n     * @memberof UpdateSubscriptionRequest\n     */\n    pauseAtPeriodEnd?: boolean;\n    /**\n     * If true, the subscription will be canceled at the end of the current period. \n     * @type {boolean}\n     * @memberof UpdateSubscriptionRequest\n     */\n    cancelAtPeriodEnd?: boolean;\n    /**\n     * Number of intervals when subscription will be paused before it activates again.\n     * @type {number}\n     * @memberof UpdateSubscriptionRequest\n     */\n    pauseIntervalCount?: number;\n    /**\n     * A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.\n     * @type {object}\n     * @memberof UpdateSubscriptionRequest\n     */\n    metadata?: object;\n}\n/**\n * \n * @export\n * @interface ValidateBizumPhoneRequest\n */\nexport interface ValidateBizumPhoneRequest {\n    /**\n     * MONEI Account identifier.\n     * @type {string}\n     * @memberof ValidateBizumPhoneRequest\n     */\n    accountId: string;\n    /**\n     * Unique identifier for the payment.\n     * @type {string}\n     * @memberof ValidateBizumPhoneRequest\n     */\n    paymentId?: string;\n    /**\n     * Phone number in E.164 format.\n     * @type {string}\n     * @memberof ValidateBizumPhoneRequest\n     */\n    phoneNumber: string;\n}\n\n/**\n * ApplePayDomainApi - axios parameter creator\n * @export\n */\nexport const ApplePayDomainApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * <p>Registers custom domain for Apple Pay.</p> <p>Download this <a href=\\\"https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/\\\">domain association file</a> and host it at <code>/.well-known/apple-developer-merchantid-domain-association</code> on your site.</p> <p>For example, if you’re registering <code>example.com</code>, make that file available at <code>https://example.com/.well-known/apple-developer-merchantid-domain-association</code>.</p> \n         * @summary Register\n         * @param {RegisterDomainRequest} registerDomainRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register: async (registerDomainRequest: RegisterDomainRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registerDomainRequest' is not null or undefined\n            if (registerDomainRequest === null || registerDomainRequest === undefined) {\n                throw new RequiredError('registerDomainRequest','Required parameter registerDomainRequest was null or undefined when calling register.');\n            }\n            const localVarPath = `/apple-pay/domains`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof registerDomainRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerDomainRequest !== undefined ? registerDomainRequest : {}) : (registerDomainRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApplePayDomainApi - functional programming interface\n * @export\n */\nexport const ApplePayDomainApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * <p>Registers custom domain for Apple Pay.</p> <p>Download this <a href=\\\"https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/\\\">domain association file</a> and host it at <code>/.well-known/apple-developer-merchantid-domain-association</code> on your site.</p> <p>For example, if you’re registering <code>example.com</code>, make that file available at <code>https://example.com/.well-known/apple-developer-merchantid-domain-association</code>.</p> \n         * @summary Register\n         * @param {RegisterDomainRequest} registerDomainRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async register(registerDomainRequest: RegisterDomainRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\n            const localVarAxiosArgs = await ApplePayDomainApiAxiosParamCreator(configuration).register(registerDomainRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ApplePayDomainApi - factory interface\n * @export\n */\nexport const ApplePayDomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * <p>Registers custom domain for Apple Pay.</p> <p>Download this <a href=\\\"https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/\\\">domain association file</a> and host it at <code>/.well-known/apple-developer-merchantid-domain-association</code> on your site.</p> <p>For example, if you’re registering <code>example.com</code>, make that file available at <code>https://example.com/.well-known/apple-developer-merchantid-domain-association</code>.</p> \n         * @summary Register\n         * @param {RegisterDomainRequest} registerDomainRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registerDomainRequest: RegisterDomainRequest, options?: any): AxiosPromise<InlineResponse200> {\n            return ApplePayDomainApiFp(configuration).register(registerDomainRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ApplePayDomainApi - object-oriented interface\n * @export\n * @class ApplePayDomainApi\n * @extends {BaseAPI}\n */\nexport class ApplePayDomainApi extends BaseAPI {\n    /**\n     * <p>Registers custom domain for Apple Pay.</p> <p>Download this <a href=\\\"https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/\\\">domain association file</a> and host it at <code>/.well-known/apple-developer-merchantid-domain-association</code> on your site.</p> <p>For example, if you’re registering <code>example.com</code>, make that file available at <code>https://example.com/.well-known/apple-developer-merchantid-domain-association</code>.</p> \n     * @summary Register\n     * @param {RegisterDomainRequest} registerDomainRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApplePayDomainApi\n     */\n    public register(registerDomainRequest: RegisterDomainRequest, options?: any) {\n        return ApplePayDomainApiFp(this.configuration).register(registerDomainRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n/**\n * BizumApi - axios parameter creator\n * @export\n */\nexport const BizumApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * <p>Verifies if the provided phone number is registered in Bizum. This method does not require authentication. Either <code>accountId</code> or <code>paymentId</code> must be provided in the request body.</p> \n         * @summary Validate Phone\n         * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatePhone: async (validateBizumPhoneRequest: ValidateBizumPhoneRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'validateBizumPhoneRequest' is not null or undefined\n            if (validateBizumPhoneRequest === null || validateBizumPhoneRequest === undefined) {\n                throw new RequiredError('validateBizumPhoneRequest','Required parameter validateBizumPhoneRequest was null or undefined when calling validatePhone.');\n            }\n            const localVarPath = `/bizum/validate-phone`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof validateBizumPhoneRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(validateBizumPhoneRequest !== undefined ? validateBizumPhoneRequest : {}) : (validateBizumPhoneRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BizumApi - functional programming interface\n * @export\n */\nexport const BizumApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * <p>Verifies if the provided phone number is registered in Bizum. This method does not require authentication. Either <code>accountId</code> or <code>paymentId</code> must be provided in the request body.</p> \n         * @summary Validate Phone\n         * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {\n            const localVarAxiosArgs = await BizumApiAxiosParamCreator(configuration).validatePhone(validateBizumPhoneRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * BizumApi - factory interface\n * @export\n */\nexport const BizumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * <p>Verifies if the provided phone number is registered in Bizum. This method does not require authentication. Either <code>accountId</code> or <code>paymentId</code> must be provided in the request body.</p> \n         * @summary Validate Phone\n         * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: any): AxiosPromise<InlineResponse2001> {\n            return BizumApiFp(configuration).validatePhone(validateBizumPhoneRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BizumApi - object-oriented interface\n * @export\n * @class BizumApi\n * @extends {BaseAPI}\n */\nexport class BizumApi extends BaseAPI {\n    /**\n     * <p>Verifies if the provided phone number is registered in Bizum. This method does not require authentication. Either <code>accountId</code> or <code>paymentId</code> must be provided in the request body.</p> \n     * @summary Validate Phone\n     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BizumApi\n     */\n    public validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: any) {\n        return BizumApiFp(this.configuration).validatePhone(validateBizumPhoneRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n/**\n * PaymentsApi - axios parameter creator\n * @export\n */\nexport const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Release customer\\'s funds that were reserved earlier. You can only cancel a payment with the `AUTHORIZED` status.  This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`. \n         * @summary Cancel Payment\n         * @param {string} id The payment ID\n         * @param {CancelPaymentRequest} [cancelPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancel: async (id: string, cancelPaymentRequest?: CancelPaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling cancel.');\n            }\n            const localVarPath = `/payments/{id}/cancel`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof cancelPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(cancelPaymentRequest !== undefined ? cancelPaymentRequest : {}) : (cancelPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Capture the payment of an existing, uncaptured, payment. This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`.  Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as expired and will no longer be capturable. \n         * @summary Capture Payment\n         * @param {string} id The payment ID\n         * @param {CapturePaymentRequest} [capturePaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        capture: async (id: string, capturePaymentRequest?: CapturePaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling capture.');\n            }\n            const localVarPath = `/payments/{id}/capture`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof capturePaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(capturePaymentRequest !== undefined ? capturePaymentRequest : {}) : (capturePaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Confirm a payment that was created without a `paymentToken` or `paymentMethod`. You can only confirm a payment with the `PENDING` status.  You can charge a customer in two steps. First create a payment without payment details and then confirm it after you generate a `paymentToken` on the front-end with monei.js [Components](https://docs.monei.com/docs/monei-js-overview).  You can provide additional customer information, it will override the information passed in **create payment** request. \n         * @summary Confirm Payment\n         * @param {string} id The payment ID\n         * @param {ConfirmPaymentRequest} [confirmPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        confirm: async (id: string, confirmPaymentRequest?: ConfirmPaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling confirm.');\n            }\n            const localVarPath = `/payments/{id}/confirm`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof confirmPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(confirmPaymentRequest !== undefined ? confirmPaymentRequest : {}) : (confirmPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * To charge a credit card or other payment method, you create a Payment.  Payment can also be created without a payment method to initiate a payment process and redirect a customer to the hosted payment page. \n         * @summary Create Payment\n         * @param {CreatePaymentRequest} createPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create: async (createPaymentRequest: CreatePaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'createPaymentRequest' is not null or undefined\n            if (createPaymentRequest === null || createPaymentRequest === undefined) {\n                throw new RequiredError('createPaymentRequest','Required parameter createPaymentRequest was null or undefined when calling create.');\n            }\n            const localVarPath = `/payments`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof createPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createPaymentRequest !== undefined ? createPaymentRequest : {}) : (createPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the details of a payment that has previously been created. Supply the unique payment ID that was returned from your previous request. \n         * @summary Get Payment\n         * @param {string} id The payment ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');\n            }\n            const localVarPath = `/payments/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a subsequent operation for a recurring payment, previously created. The specified amount will be charged to the same credit or debit card of the originally payment.  If amount is not specified, it will default to the same amount from the original payment. \n         * @summary Recurring Payment\n         * @param {string} sequenceId The sequence ID\n         * @param {RecurringPaymentRequest} [recurringPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        recurring: async (sequenceId: string, recurringPaymentRequest?: RecurringPaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sequenceId' is not null or undefined\n            if (sequenceId === null || sequenceId === undefined) {\n                throw new RequiredError('sequenceId','Required parameter sequenceId was null or undefined when calling recurring.');\n            }\n            const localVarPath = `/payments/{sequenceId}/recurring`\n                .replace(`{${\"sequenceId\"}}`, encodeURIComponent(String(sequenceId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof recurringPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recurringPaymentRequest !== undefined ? recurringPaymentRequest : {}) : (recurringPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refund a payment that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  You can optionally refund only part of a payment. You can do so multiple times, until the entire payment has been refunded.  Once entirely refunded, a payment can’t be refunded again. This method will throw an error when called on an already-refunded payment, or when trying to refund more money than is left on a payment. \n         * @summary Refund Payment\n         * @param {string} id The payment ID\n         * @param {RefundPaymentRequest} [refundPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refund: async (id: string, refundPaymentRequest?: RefundPaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling refund.');\n            }\n            const localVarPath = `/payments/{id}/refund`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof refundPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(refundPaymentRequest !== undefined ? refundPaymentRequest : {}) : (refundPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Sends a payment link to the customer. If payment has customer email, the link is sent via email. If payment has customer phone, the link is sent via WhatsApp, if the phone number is not registered in WhatsApp, the link is sent via SMS. \n         * @summary Send Payment Link\n         * @param {string} id The payment ID\n         * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendLink: async (id: string, sendPaymentLinkRequest?: SendPaymentLinkRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling sendLink.');\n            }\n            const localVarPath = `/payments/{id}/link`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sendPaymentLinkRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sendPaymentLinkRequest !== undefined ? sendPaymentLinkRequest : {}) : (sendPaymentLinkRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Sends a payment receipt to the customer. If payment has customer email, the receipt is sent via email. If payment has customer phone, the receipt is sent via WhatsApp, if the phone number is not registered in WhatsApp, the receipt is sent via SMS. \n         * @summary Send Payment Receipt\n         * @param {string} id The payment ID\n         * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendReceipt: async (id: string, sendPaymentReceiptRequest?: SendPaymentReceiptRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling sendReceipt.');\n            }\n            const localVarPath = `/payments/{id}/receipt`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sendPaymentReceiptRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sendPaymentReceiptRequest !== undefined ? sendPaymentReceiptRequest : {}) : (sendPaymentReceiptRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Sends a payment request directly to the customer\\'s phone. If Bizum payment method is available and the phone number is registered in Bizum, the customer will get a push notification to confirm the payment directly in the banking app, otherwise, he will receive a link to pay via WhatsApp. \n         * @summary Send Payment Request\n         * @param {string} id The payment ID\n         * @param {SendPaymentRequest} sendPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRequest: async (id: string, sendPaymentRequest: SendPaymentRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling sendRequest.');\n            }\n            // verify required parameter 'sendPaymentRequest' is not null or undefined\n            if (sendPaymentRequest === null || sendPaymentRequest === undefined) {\n                throw new RequiredError('sendPaymentRequest','Required parameter sendPaymentRequest was null or undefined when calling sendRequest.');\n            }\n            const localVarPath = `/payments/{id}/rtp`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sendPaymentRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sendPaymentRequest !== undefined ? sendPaymentRequest : {}) : (sendPaymentRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PaymentsApi - functional programming interface\n * @export\n */\nexport const PaymentsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Release customer\\'s funds that were reserved earlier. You can only cancel a payment with the `AUTHORIZED` status.  This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`. \n         * @summary Cancel Payment\n         * @param {string} id The payment ID\n         * @param {CancelPaymentRequest} [cancelPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async cancel(id: string, cancelPaymentRequest?: CancelPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).cancel(id, cancelPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Capture the payment of an existing, uncaptured, payment. This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`.  Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as expired and will no longer be capturable. \n         * @summary Capture Payment\n         * @param {string} id The payment ID\n         * @param {CapturePaymentRequest} [capturePaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async capture(id: string, capturePaymentRequest?: CapturePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).capture(id, capturePaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Confirm a payment that was created without a `paymentToken` or `paymentMethod`. You can only confirm a payment with the `PENDING` status.  You can charge a customer in two steps. First create a payment without payment details and then confirm it after you generate a `paymentToken` on the front-end with monei.js [Components](https://docs.monei.com/docs/monei-js-overview).  You can provide additional customer information, it will override the information passed in **create payment** request. \n         * @summary Confirm Payment\n         * @param {string} id The payment ID\n         * @param {ConfirmPaymentRequest} [confirmPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async confirm(id: string, confirmPaymentRequest?: ConfirmPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).confirm(id, confirmPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * To charge a credit card or other payment method, you create a Payment.  Payment can also be created without a payment method to initiate a payment process and redirect a customer to the hosted payment page. \n         * @summary Create Payment\n         * @param {CreatePaymentRequest} createPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async create(createPaymentRequest: CreatePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).create(createPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the details of a payment that has previously been created. Supply the unique payment ID that was returned from your previous request. \n         * @summary Get Payment\n         * @param {string} id The payment ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).get(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a subsequent operation for a recurring payment, previously created. The specified amount will be charged to the same credit or debit card of the originally payment.  If amount is not specified, it will default to the same amount from the original payment. \n         * @summary Recurring Payment\n         * @param {string} sequenceId The sequence ID\n         * @param {RecurringPaymentRequest} [recurringPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async recurring(sequenceId: string, recurringPaymentRequest?: RecurringPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).recurring(sequenceId, recurringPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Refund a payment that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  You can optionally refund only part of a payment. You can do so multiple times, until the entire payment has been refunded.  Once entirely refunded, a payment can’t be refunded again. This method will throw an error when called on an already-refunded payment, or when trying to refund more money than is left on a payment. \n         * @summary Refund Payment\n         * @param {string} id The payment ID\n         * @param {RefundPaymentRequest} [refundPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refund(id: string, refundPaymentRequest?: RefundPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).refund(id, refundPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Sends a payment link to the customer. If payment has customer email, the link is sent via email. If payment has customer phone, the link is sent via WhatsApp, if the phone number is not registered in WhatsApp, the link is sent via SMS. \n         * @summary Send Payment Link\n         * @param {string} id The payment ID\n         * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sendLink(id: string, sendPaymentLinkRequest?: SendPaymentLinkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).sendLink(id, sendPaymentLinkRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Sends a payment receipt to the customer. If payment has customer email, the receipt is sent via email. If payment has customer phone, the receipt is sent via WhatsApp, if the phone number is not registered in WhatsApp, the receipt is sent via SMS. \n         * @summary Send Payment Receipt\n         * @param {string} id The payment ID\n         * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sendReceipt(id: string, sendPaymentReceiptRequest?: SendPaymentReceiptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).sendReceipt(id, sendPaymentReceiptRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Sends a payment request directly to the customer\\'s phone. If Bizum payment method is available and the phone number is registered in Bizum, the customer will get a push notification to confirm the payment directly in the banking app, otherwise, he will receive a link to pay via WhatsApp. \n         * @summary Send Payment Request\n         * @param {string} id The payment ID\n         * @param {SendPaymentRequest} sendPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sendRequest(id: string, sendPaymentRequest: SendPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).sendRequest(id, sendPaymentRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * PaymentsApi - factory interface\n * @export\n */\nexport const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * Release customer\\'s funds that were reserved earlier. You can only cancel a payment with the `AUTHORIZED` status.  This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`. \n         * @summary Cancel Payment\n         * @param {string} id The payment ID\n         * @param {CancelPaymentRequest} [cancelPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancel(id: string, cancelPaymentRequest?: CancelPaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).cancel(id, cancelPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Capture the payment of an existing, uncaptured, payment. This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`.  Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as expired and will no longer be capturable. \n         * @summary Capture Payment\n         * @param {string} id The payment ID\n         * @param {CapturePaymentRequest} [capturePaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        capture(id: string, capturePaymentRequest?: CapturePaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).capture(id, capturePaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Confirm a payment that was created without a `paymentToken` or `paymentMethod`. You can only confirm a payment with the `PENDING` status.  You can charge a customer in two steps. First create a payment without payment details and then confirm it after you generate a `paymentToken` on the front-end with monei.js [Components](https://docs.monei.com/docs/monei-js-overview).  You can provide additional customer information, it will override the information passed in **create payment** request. \n         * @summary Confirm Payment\n         * @param {string} id The payment ID\n         * @param {ConfirmPaymentRequest} [confirmPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        confirm(id: string, confirmPaymentRequest?: ConfirmPaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).confirm(id, confirmPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * To charge a credit card or other payment method, you create a Payment.  Payment can also be created without a payment method to initiate a payment process and redirect a customer to the hosted payment page. \n         * @summary Create Payment\n         * @param {CreatePaymentRequest} createPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create(createPaymentRequest: CreatePaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).create(createPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the details of a payment that has previously been created. Supply the unique payment ID that was returned from your previous request. \n         * @summary Get Payment\n         * @param {string} id The payment ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(id: string, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).get(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a subsequent operation for a recurring payment, previously created. The specified amount will be charged to the same credit or debit card of the originally payment.  If amount is not specified, it will default to the same amount from the original payment. \n         * @summary Recurring Payment\n         * @param {string} sequenceId The sequence ID\n         * @param {RecurringPaymentRequest} [recurringPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        recurring(sequenceId: string, recurringPaymentRequest?: RecurringPaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).recurring(sequenceId, recurringPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refund a payment that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  You can optionally refund only part of a payment. You can do so multiple times, until the entire payment has been refunded.  Once entirely refunded, a payment can’t be refunded again. This method will throw an error when called on an already-refunded payment, or when trying to refund more money than is left on a payment. \n         * @summary Refund Payment\n         * @param {string} id The payment ID\n         * @param {RefundPaymentRequest} [refundPaymentRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refund(id: string, refundPaymentRequest?: RefundPaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).refund(id, refundPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Sends a payment link to the customer. If payment has customer email, the link is sent via email. If payment has customer phone, the link is sent via WhatsApp, if the phone number is not registered in WhatsApp, the link is sent via SMS. \n         * @summary Send Payment Link\n         * @param {string} id The payment ID\n         * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendLink(id: string, sendPaymentLinkRequest?: SendPaymentLinkRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).sendLink(id, sendPaymentLinkRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Sends a payment receipt to the customer. If payment has customer email, the receipt is sent via email. If payment has customer phone, the receipt is sent via WhatsApp, if the phone number is not registered in WhatsApp, the receipt is sent via SMS. \n         * @summary Send Payment Receipt\n         * @param {string} id The payment ID\n         * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendReceipt(id: string, sendPaymentReceiptRequest?: SendPaymentReceiptRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).sendReceipt(id, sendPaymentReceiptRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Sends a payment request directly to the customer\\'s phone. If Bizum payment method is available and the phone number is registered in Bizum, the customer will get a push notification to confirm the payment directly in the banking app, otherwise, he will receive a link to pay via WhatsApp. \n         * @summary Send Payment Request\n         * @param {string} id The payment ID\n         * @param {SendPaymentRequest} sendPaymentRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRequest(id: string, sendPaymentRequest: SendPaymentRequest, options?: any): AxiosPromise<Payment> {\n            return PaymentsApiFp(configuration).sendRequest(id, sendPaymentRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PaymentsApi - object-oriented interface\n * @export\n * @class PaymentsApi\n * @extends {BaseAPI}\n */\nexport class PaymentsApi extends BaseAPI {\n    /**\n     * Release customer\\'s funds that were reserved earlier. You can only cancel a payment with the `AUTHORIZED` status.  This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`. \n     * @summary Cancel Payment\n     * @param {string} id The payment ID\n     * @param {CancelPaymentRequest} [cancelPaymentRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public cancel(id: string, cancelPaymentRequest?: CancelPaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).cancel(id, cancelPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Capture the payment of an existing, uncaptured, payment. This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`.  Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as expired and will no longer be capturable. \n     * @summary Capture Payment\n     * @param {string} id The payment ID\n     * @param {CapturePaymentRequest} [capturePaymentRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public capture(id: string, capturePaymentRequest?: CapturePaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).capture(id, capturePaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Confirm a payment that was created without a `paymentToken` or `paymentMethod`. You can only confirm a payment with the `PENDING` status.  You can charge a customer in two steps. First create a payment without payment details and then confirm it after you generate a `paymentToken` on the front-end with monei.js [Components](https://docs.monei.com/docs/monei-js-overview).  You can provide additional customer information, it will override the information passed in **create payment** request. \n     * @summary Confirm Payment\n     * @param {string} id The payment ID\n     * @param {ConfirmPaymentRequest} [confirmPaymentRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public confirm(id: string, confirmPaymentRequest?: ConfirmPaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).confirm(id, confirmPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * To charge a credit card or other payment method, you create a Payment.  Payment can also be created without a payment method to initiate a payment process and redirect a customer to the hosted payment page. \n     * @summary Create Payment\n     * @param {CreatePaymentRequest} createPaymentRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public create(createPaymentRequest: CreatePaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).create(createPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the details of a payment that has previously been created. Supply the unique payment ID that was returned from your previous request. \n     * @summary Get Payment\n     * @param {string} id The payment ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public get(id: string, options?: any) {\n        return PaymentsApiFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a subsequent operation for a recurring payment, previously created. The specified amount will be charged to the same credit or debit card of the originally payment.  If amount is not specified, it will default to the same amount from the original payment. \n     * @summary Recurring Payment\n     * @param {string} sequenceId The sequence ID\n     * @param {RecurringPaymentRequest} [recurringPaymentRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public recurring(sequenceId: string, recurringPaymentRequest?: RecurringPaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).recurring(sequenceId, recurringPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refund a payment that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  You can optionally refund only part of a payment. You can do so multiple times, until the entire payment has been refunded.  Once entirely refunded, a payment can’t be refunded again. This method will throw an error when called on an already-refunded payment, or when trying to refund more money than is left on a payment. \n     * @summary Refund Payment\n     * @param {string} id The payment ID\n     * @param {RefundPaymentRequest} [refundPaymentRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public refund(id: string, refundPaymentRequest?: RefundPaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).refund(id, refundPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Sends a payment link to the customer. If payment has customer email, the link is sent via email. If payment has customer phone, the link is sent via WhatsApp, if the phone number is not registered in WhatsApp, the link is sent via SMS. \n     * @summary Send Payment Link\n     * @param {string} id The payment ID\n     * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public sendLink(id: string, sendPaymentLinkRequest?: SendPaymentLinkRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).sendLink(id, sendPaymentLinkRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Sends a payment receipt to the customer. If payment has customer email, the receipt is sent via email. If payment has customer phone, the receipt is sent via WhatsApp, if the phone number is not registered in WhatsApp, the receipt is sent via SMS. \n     * @summary Send Payment Receipt\n     * @param {string} id The payment ID\n     * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public sendReceipt(id: string, sendPaymentReceiptRequest?: SendPaymentReceiptRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).sendReceipt(id, sendPaymentReceiptRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Sends a payment request directly to the customer\\'s phone. If Bizum payment method is available and the phone number is registered in Bizum, the customer will get a push notification to confirm the payment directly in the banking app, otherwise, he will receive a link to pay via WhatsApp. \n     * @summary Send Payment Request\n     * @param {string} id The payment ID\n     * @param {SendPaymentRequest} sendPaymentRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    public sendRequest(id: string, sendPaymentRequest: SendPaymentRequest, options?: any) {\n        return PaymentsApiFp(this.configuration).sendRequest(id, sendPaymentRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n/**\n * SubscriptionsApi - axios parameter creator\n * @export\n */\nexport const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Activates the subscription that was previously created. Activation of the subscription will create an initial payment. If the subscription has trial period, the initial payment will have zero amount. The subscription is automatically activated when initial payment is confirmed.  If the subscription is already activated, this endpoint can be used to update payment method. This will also generate zero amount payment. \n         * @summary Activate Subscription\n         * @param {string} id The subscription ID\n         * @param {ActivateSubscriptionRequest} [activateSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        activate: async (id: string, activateSubscriptionRequest?: ActivateSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling activate.');\n            }\n            const localVarPath = `/subscriptions/{id}/activate`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof activateSubscriptionRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(activateSubscriptionRequest !== undefined ? activateSubscriptionRequest : {}) : (activateSubscriptionRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Cancels the activate subscription. \n         * @summary Cancel Subscription\n         * @param {string} id The subscription ID\n         * @param {CancelSubscriptionRequest} [cancelSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancel: async (id: string, cancelSubscriptionRequest?: CancelSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling cancel.');\n            }\n            const localVarPath = `/subscriptions/{id}/cancel`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof cancelSubscriptionRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(cancelSubscriptionRequest !== undefined ? cancelSubscriptionRequest : {}) : (cancelSubscriptionRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new subscription. Subscription is created with status: `PENDING`. In order to activate it you need to call [activate endpoint](#operation/subscriptions_activate). \n         * @summary Create Subscription\n         * @param {CreateSubscriptionRequest} createSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create: async (createSubscriptionRequest: CreateSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'createSubscriptionRequest' is not null or undefined\n            if (createSubscriptionRequest === null || createSubscriptionRequest === undefined) {\n                throw new RequiredError('createSubscriptionRequest','Required parameter createSubscriptionRequest was null or undefined when calling create.');\n            }\n            const localVarPath = `/subscriptions`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof createSubscriptionRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createSubscriptionRequest !== undefined ? createSubscriptionRequest : {}) : (createSubscriptionRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the details of a subscription that has previously been created. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Get Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');\n            }\n            const localVarPath = `/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Pauses the active subscription. \n         * @summary Pause Subscription\n         * @param {string} id The subscription ID\n         * @param {PauseSubscriptionRequest} [pauseSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pause: async (id: string, pauseSubscriptionRequest?: PauseSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling pause.');\n            }\n            const localVarPath = `/subscriptions/{id}/pause`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof pauseSubscriptionRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pauseSubscriptionRequest !== undefined ? pauseSubscriptionRequest : {}) : (pauseSubscriptionRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Resumes the paused subscription. \n         * @summary Resume Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resume: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resume.');\n            }\n            const localVarPath = `/subscriptions/{id}/resume`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates an existing subscription. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Update Subscription\n         * @param {string} id The subscription ID\n         * @param {UpdateSubscriptionRequest} updateSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        update: async (id: string, updateSubscriptionRequest: UpdateSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');\n            }\n            // verify required parameter 'updateSubscriptionRequest' is not null or undefined\n            if (updateSubscriptionRequest === null || updateSubscriptionRequest === undefined) {\n                throw new RequiredError('updateSubscriptionRequest','Required parameter updateSubscriptionRequest was null or undefined when calling update.');\n            }\n            const localVarPath = `/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKey required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? await configuration.apiKey(\"Authorization\")\n                    : await configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof updateSubscriptionRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateSubscriptionRequest !== undefined ? updateSubscriptionRequest : {}) : (updateSubscriptionRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SubscriptionsApi - functional programming interface\n * @export\n */\nexport const SubscriptionsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Activates the subscription that was previously created. Activation of the subscription will create an initial payment. If the subscription has trial period, the initial payment will have zero amount. The subscription is automatically activated when initial payment is confirmed.  If the subscription is already activated, this endpoint can be used to update payment method. This will also generate zero amount payment. \n         * @summary Activate Subscription\n         * @param {string} id The subscription ID\n         * @param {ActivateSubscriptionRequest} [activateSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async activate(id: string, activateSubscriptionRequest?: ActivateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).activate(id, activateSubscriptionRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Cancels the activate subscription. \n         * @summary Cancel Subscription\n         * @param {string} id The subscription ID\n         * @param {CancelSubscriptionRequest} [cancelSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async cancel(id: string, cancelSubscriptionRequest?: CancelSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).cancel(id, cancelSubscriptionRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Creates a new subscription. Subscription is created with status: `PENDING`. In order to activate it you need to call [activate endpoint](#operation/subscriptions_activate). \n         * @summary Create Subscription\n         * @param {CreateSubscriptionRequest} createSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async create(createSubscriptionRequest: CreateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).create(createSubscriptionRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the details of a subscription that has previously been created. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Get Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).get(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Pauses the active subscription. \n         * @summary Pause Subscription\n         * @param {string} id The subscription ID\n         * @param {PauseSubscriptionRequest} [pauseSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pause(id: string, pauseSubscriptionRequest?: PauseSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).pause(id, pauseSubscriptionRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Resumes the paused subscription. \n         * @summary Resume Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resume(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).resume(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Updates an existing subscription. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Update Subscription\n         * @param {string} id The subscription ID\n         * @param {UpdateSubscriptionRequest} updateSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async update(id: string, updateSubscriptionRequest: UpdateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await SubscriptionsApiAxiosParamCreator(configuration).update(id, updateSubscriptionRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * SubscriptionsApi - factory interface\n * @export\n */\nexport const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * Activates the subscription that was previously created. Activation of the subscription will create an initial payment. If the subscription has trial period, the initial payment will have zero amount. The subscription is automatically activated when initial payment is confirmed.  If the subscription is already activated, this endpoint can be used to update payment method. This will also generate zero amount payment. \n         * @summary Activate Subscription\n         * @param {string} id The subscription ID\n         * @param {ActivateSubscriptionRequest} [activateSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        activate(id: string, activateSubscriptionRequest?: ActivateSubscriptionRequest, options?: any): AxiosPromise<Payment> {\n            return SubscriptionsApiFp(configuration).activate(id, activateSubscriptionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Cancels the activate subscription. \n         * @summary Cancel Subscription\n         * @param {string} id The subscription ID\n         * @param {CancelSubscriptionRequest} [cancelSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancel(id: string, cancelSubscriptionRequest?: CancelSubscriptionRequest, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).cancel(id, cancelSubscriptionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new subscription. Subscription is created with status: `PENDING`. In order to activate it you need to call [activate endpoint](#operation/subscriptions_activate). \n         * @summary Create Subscription\n         * @param {CreateSubscriptionRequest} createSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create(createSubscriptionRequest: CreateSubscriptionRequest, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).create(createSubscriptionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the details of a subscription that has previously been created. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Get Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(id: string, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).get(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Pauses the active subscription. \n         * @summary Pause Subscription\n         * @param {string} id The subscription ID\n         * @param {PauseSubscriptionRequest} [pauseSubscriptionRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pause(id: string, pauseSubscriptionRequest?: PauseSubscriptionRequest, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).pause(id, pauseSubscriptionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Resumes the paused subscription. \n         * @summary Resume Subscription\n         * @param {string} id The subscription ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resume(id: string, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).resume(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates an existing subscription. Supply the unique subscription ID that was returned from your previous request. \n         * @summary Update Subscription\n         * @param {string} id The subscription ID\n         * @param {UpdateSubscriptionRequest} updateSubscriptionRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        update(id: string, updateSubscriptionRequest: UpdateSubscriptionRequest, options?: any): AxiosPromise<Subscription> {\n            return SubscriptionsApiFp(configuration).update(id, updateSubscriptionRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SubscriptionsApi - object-oriented interface\n * @export\n * @class SubscriptionsApi\n * @extends {BaseAPI}\n */\nexport class SubscriptionsApi extends BaseAPI {\n    /**\n     * Activates the subscription that was previously created. Activation of the subscription will create an initial payment. If the subscription has trial period, the initial payment will have zero amount. The subscription is automatically activated when initial payment is confirmed.  If the subscription is already activated, this endpoint can be used to update payment method. This will also generate zero amount payment. \n     * @summary Activate Subscription\n     * @param {string} id The subscription ID\n     * @param {ActivateSubscriptionRequest} [activateSubscriptionRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public activate(id: string, activateSubscriptionRequest?: ActivateSubscriptionRequest, options?: any) {\n        return SubscriptionsApiFp(this.configuration).activate(id, activateSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Cancels the activate subscription. \n     * @summary Cancel Subscription\n     * @param {string} id The subscription ID\n     * @param {CancelSubscriptionRequest} [cancelSubscriptionRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public cancel(id: string, cancelSubscriptionRequest?: CancelSubscriptionRequest, options?: any) {\n        return SubscriptionsApiFp(this.configuration).cancel(id, cancelSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new subscription. Subscription is created with status: `PENDING`. In order to activate it you need to call [activate endpoint](#operation/subscriptions_activate). \n     * @summary Create Subscription\n     * @param {CreateSubscriptionRequest} createSubscriptionRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public create(createSubscriptionRequest: CreateSubscriptionRequest, options?: any) {\n        return SubscriptionsApiFp(this.configuration).create(createSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the details of a subscription that has previously been created. Supply the unique subscription ID that was returned from your previous request. \n     * @summary Get Subscription\n     * @param {string} id The subscription ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public get(id: string, options?: any) {\n        return SubscriptionsApiFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Pauses the active subscription. \n     * @summary Pause Subscription\n     * @param {string} id The subscription ID\n     * @param {PauseSubscriptionRequest} [pauseSubscriptionRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public pause(id: string, pauseSubscriptionRequest?: PauseSubscriptionRequest, options?: any) {\n        return SubscriptionsApiFp(this.configuration).pause(id, pauseSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Resumes the paused subscription. \n     * @summary Resume Subscription\n     * @param {string} id The subscription ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public resume(id: string, options?: any) {\n        return SubscriptionsApiFp(this.configuration).resume(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates an existing subscription. Supply the unique subscription ID that was returned from your previous request. \n     * @summary Update Subscription\n     * @param {string} id The subscription ID\n     * @param {UpdateSubscriptionRequest} updateSubscriptionRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscriptionsApi\n     */\n    public update(id: string, updateSubscriptionRequest: UpdateSubscriptionRequest, options?: any) {\n        return SubscriptionsApiFp(this.configuration).update(id, updateSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * MONEI API v1\n * <p>The MONEI API is organized around <a href=\\\"https://en.wikipedia.org/wiki/Representational_State_Transfer\\\">REST</a>. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <h4 id=\\\"base-url\\\">Base URL:</h4> <p><a href=\\\"https://api.monei.com/v1\\\">https://api.monei.com/v1</a></p> <h4 id=\\\"client-libraries\\\">Client libraries:</h4> <ul> <li><a href=\\\"https://github.com/MONEI/monei-php-sdk\\\">PHP SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-python-sdk\\\">Python SDK</a></li> <li><a href=\\\"https://github.com/MONEI/monei-node-sdk\\\">Node.js SDK</a></li> <li><a href=\\\"https://postman.monei.com/\\\">Postman</a></li> </ul> <h4 id=\\\"important\\\">Important:</h4> <p><strong>If you are not using our official SDKs, you need to provide a valid <code>User-Agent</code> header in each request, otherwise your requests will be rejected.</strong></p> \n *\n * The version of the OpenAPI document: 1.4.4\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    basePath?: string;\n    baseOptions?: any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport pkg from './package.json';\nimport {ApplePayDomainApi, PaymentsApi, SubscriptionsApi} from './src';\nimport {BASE_PATH} from './src/base';\nimport crypto from 'crypto';\n\nexport * from './src';\n\ntype ServerErrorResponse = {\n  status: string;\n  statusCode: number;\n  requestId: string;\n  message: string;\n  requestTime: string;\n};\n\nclass ServerError extends Error {\n  status: string;\n  statusCode: number;\n  requestId: string;\n  requestTime: Date;\n\n  constructor(res: ServerErrorResponse) {\n    super(res.message);\n    this.status = res.status;\n    this.statusCode = res.statusCode;\n    this.requestId = res.requestId;\n    this.requestTime = new Date(res.requestTime);\n  }\n}\n\nconst responseHandler = (res: AxiosResponse) => {\n  return res.data;\n};\n\nconst errorHandler = (error: any) => {\n  if (error?.response?.data) {\n    throw new ServerError(error.response.data);\n  }\n  throw new Error('Something when wrong');\n};\n\nexport class Monei {\n  private apiKey: string;\n  client: AxiosInstance;\n  payments: PaymentsApi;\n  subscriptions: SubscriptionsApi;\n  applePayDomain: ApplePayDomainApi;\n\n  constructor(apiKey: string, baseOptions?: AxiosRequestConfig) {\n    this.client = axios.create();\n    this.client.interceptors.response.use(responseHandler, errorHandler);\n    this.client.defaults.headers.common['User-Agent'] = `MONEI/Node/${pkg.version}`;\n    this.apiKey = apiKey;\n    this.payments = new PaymentsApi({apiKey, baseOptions}, BASE_PATH, this.client);\n    this.subscriptions = new SubscriptionsApi({apiKey, baseOptions}, BASE_PATH, this.client);\n    this.applePayDomain = new ApplePayDomainApi({apiKey, baseOptions}, BASE_PATH, this.client);\n  }\n\n  verifySignature(body: string, signature: string) {\n    const parts = signature.split(',').reduce<Record<string, string>>((result, part) => {\n      const [key, value] = part.split('=');\n      result[key] = value;\n      return result;\n    }, {});\n    const hmac = crypto\n      .createHmac('SHA256', this.apiKey)\n      .update(`${parts.t}.${body}`)\n      .digest('hex');\n\n    if (hmac !== parts.v1) {\n      throw new Error('Signature verification failed.');\n    }\n\n    return JSON.parse(body);\n  }\n}\n"],"names":["BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","axios","globalAxios","RequiredError","Error","field","msg","PaymentCancellationReason","PaymentLastRefundReason","PaymentMessageChannel","PaymentMessageLanguage","PaymentNextActionTypeEnum","PaymentPaymentMethodMethodEnum","PaymentPaymentMethodCardBrandEnum","PaymentPaymentMethodCardTypeEnum","PaymentPaymentMethodCardThreeDSecureFlowEnum","PaymentPaymentMethodCardTokenizationMethodEnum","PaymentPaymentMethodKlarnaBillingCategoryEnum","PaymentPaymentMethodKlarnaAuthPaymentMethodEnum","PaymentRefundReason","PaymentSequenceTypeEnum","PaymentStatus","PaymentTransactionType","SubscriptionInterval","SubscriptionPaymentMethodMethodEnum","SubscriptionPaymentMethodCardBrandEnum","SubscriptionPaymentMethodCardTypeEnum","SubscriptionStatus","ApplePayDomainApiAxiosParamCreator","register","registerDomainRequest","options","localVarHeaderParameter","localVarUrlObj","query","localVarQueryParameter","search","headersFromBaseOptions","baseOptions","headers","localVarRequestOptions","needsSerialization","data","JSON","stringify","undefined","url","globalImportUrl","localVarPath","method","apiKey","localVarApiKeyValue","ApplePayDomainApiFp","localVarAxiosArgs","axiosRequestArgs","request","ApplePayDomainApiFactory","then","ApplePayDomainApi","BizumApiAxiosParamCreator","validatePhone","validateBizumPhoneRequest","BizumApiFp","BizumApiFactory","BizumApi","PaymentsApiAxiosParamCreator","cancel","id","cancelPaymentRequest","encodeURIComponent","String","capture","capturePaymentRequest","confirm","confirmPaymentRequest","create","createPaymentRequest","get","recurring","sequenceId","recurringPaymentRequest","refund","refundPaymentRequest","sendLink","sendPaymentLinkRequest","sendReceipt","sendPaymentReceiptRequest","sendRequest","sendPaymentRequest","PaymentsApiFp","PaymentsApiFactory","PaymentsApi","SubscriptionsApiAxiosParamCreator","activate","activateSubscriptionRequest","cancelSubscriptionRequest","createSubscriptionRequest","pause","pauseSubscriptionRequest","resume","update","updateSubscriptionRequest","SubscriptionsApiFp","SubscriptionsApiFactory","SubscriptionsApi","Configuration","param","username","password","accessToken","ServerError","res","message","status","statusCode","requestId","requestTime","Date","responseHandler","errorHandler","error","response","Monei","client","interceptors","use","defaults","common","pkg","version","payments","subscriptions","applePayDomain","verifySignature","body","signature","parts","split","reduce","result","part","key","value","hmac","crypto","createHmac","t","digest","v1","parse"],"mappings":"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"}